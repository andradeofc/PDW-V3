{"remainingRequest":"C:\\Users\\Andrade\\Desktop\\ProjetoDevWeb\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\Andrade\\Desktop\\ProjetoDevWeb\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\Andrade\\Desktop\\ProjetoDevWeb\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Andrade\\Desktop\\ProjetoDevWeb\\src\\views\\pesquisa\\index.vue?vue&type=template&id=3141975c&scoped=true&","dependencies":[{"path":"C:\\Users\\Andrade\\Desktop\\ProjetoDevWeb\\src\\views\\pesquisa\\index.vue","mtime":1581090828802},{"path":"C:\\Users\\Andrade\\Desktop\\ProjetoDevWeb\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Andrade\\Desktop\\ProjetoDevWeb\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\Andrade\\Desktop\\ProjetoDevWeb\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Andrade\\Desktop\\ProjetoDevWeb\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}